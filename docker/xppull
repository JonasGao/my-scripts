#!/bin/bash

# -------------------------------------------------------------
# 脚本名称: xppull
# 功能概述:
#   通过远程主机代理拉取指定镜像，并将镜像推送到本地私有仓库。
#   工作流程：
#     1) 在远程主机上执行自定义 proxy 命令拉取镜像
#     2) 在本机通过 xpull 将镜像重标记并推送到目标私有仓库
#
# 使用方法:
#   xppull <image[:tag]> [image[:tag] ...]
#
# 参数说明:
#   位置参数为一个或多个镜像名称（含可选 tag），将依次处理
#
# 关键变量（可在脚本内修改或在执行前导出同名环境变量覆盖）:
#   REMOTE_HOST   远程主机及账号（默认: debian@172.16.201.12）
#   REGISTRY_HOST 远程仓库地址（默认: 172.16.201.11:5000）
#   LOCAL_REGISTRY 本地私有仓库（默认: 127.0.0.1:5000，仅用于提示输出）
#
# 依赖项:
#   - 本机与远程主机均需安装 docker
#   - 可用的 ssh 访问权限（免密或已配置凭据）
#   - 本机已安装并可调用 xpull 脚本
#
# 适用场景:
#   - 通过指定的远程网络出口拉取镜像，再回传同步至本地私有仓库
#
# 示例:
#   xppull redis:7-alpine
#   xppull apache/doris:be-3.1 nginx:latest
# -------------------------------------------------------------

# 检查参数
if [ $# -lt 1 ]; then
    echo "用法: $0 <image_name:tag> [image_name:tag...]"
    exit 1
fi

REMOTE_HOST="debian@172.16.201.12"
REGISTRY_HOST="172.16.201.11:5000"
LOCAL_REGISTRY="127.0.0.1:5000"

TOTAL_IMAGES=$#
CURRENT_IMAGE=1

# 循环处理所有传入的镜像参数
for IMAGE_NAME in "$@"; do
    echo "正在处理第 ${CURRENT_IMAGE}/${TOTAL_IMAGES} 个镜像: ${IMAGE_NAME}"

    # 在远程服务器上执行 proxy 命令拉取镜像
    ssh "${REMOTE_HOST}" "/home/debian/bin/proxy ${IMAGE_NAME}"

    # 推送到本地仓库
    xpull -r "${REGISTRY_HOST}/${IMAGE_NAME}"

    echo "完成第 ${CURRENT_IMAGE}/${TOTAL_IMAGES} 个镜像: ${LOCAL_REGISTRY}/${IMAGE_NAME}"
    echo "----------------------------------------"
    
    ((CURRENT_IMAGE++))
done

echo "所有镜像同步完成！"
