#!/bin/bash

# -------------------------------------------------------------
# 脚本名称: xpull
# 功能概述:
#   批量处理并推送 Docker 镜像到一个或多个本地/私有仓库。
#   支持：
#     - 可选先行 docker pull 拉取源镜像
#     - 可选移除镜像名称中的首个域名段（便于重写仓库前缀）
#     - 从 docker daemon.json 自动检测不安全仓库列表
#     - 推送完成后可选清理本地镜像（含中间 tag）
#
# 使用方法:
#   xpull [-r] [-a] [-p] [-c] <image[:tag]> [image[:tag] ...]
#
# 参数说明:
#   -r  移除镜像名称最前面的域名段（如 docker.io/library/nginx → library/nginx）
#   -a  自动从 daemon.json 读取 insecure-registries 作为目标仓库列表
#   -p  在推送前先执行 docker pull 源镜像（默认不拉取）
#   -c  推送完成后清理本地镜像及标记（默认不清理）
#   -h  显示帮助
#
# 环境变量:
#   LOCAL_REGISTRIES  逗号分隔的仓库地址列表（默认: 127.0.0.1:5000）
#                     例: 127.0.0.1:5000,192.168.1.100:5000
#
# 依赖项:
#   - docker 必需
#   - jq（仅当使用 -a 自动检测时需要）
#
# 适用场景:
#   - 将公共镜像或任意源镜像快速同步到内网私有仓库
#   - 一次推送到多个目标仓库
#
# 示例:
#   xpull docker.io/library/nginx:latest
#   xpull -r docker.io/library/nginx:latest docker.io/library/redis:latest
#   xpull -a nginx:latest redis:latest postgres:latest
#   LOCAL_REGISTRIES=127.0.0.1:5000,192.168.1.100:5000 xpull nginx:alpine
#
# 退出码:
#   0 表示全部镜像处理成功；非 0 表示过程中存在失败
#
# 注意事项:
#   - 建议确保对目标仓库已登录（docker login）
#   - 使用 -a 时需保证能读取到系统的 daemon.json 并安装 jq
# -------------------------------------------------------------

# 定义颜色
GREEN='\033[0;32m'
BLUE='\033[0;94m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color
INFO="${BLUE}[INFO]${NC}"
SUCCESS="${GREEN}[SUCCESS]${NC}"
WARN="${YELLOW}[WARN]${NC}"
ERROR="${RED}[ERROR]${NC}"

ME=$(basename $0)

# 显示帮助信息的函数
show_help() {
    echo -e "${BLUE}Usage:${NC} ${ME} [-r] [-a] [-p] [-c] <image_name:tag> [image_name:tag ...]"
    echo -e "${BLUE}Options:${NC}"
    echo "  -r    Remove first domain part from image names"
    echo "  -a    Auto detect registries from docker daemon.json"
    echo "  -p    Pull images before pushing (default: false)"
    echo "  -c    Clean local images after pushing (default: false)"
    echo -e "${BLUE}Environment Variables:${NC}"
    echo "  LOCAL_REGISTRIES    Comma-separated list of registry addresses (default: 127.0.0.1:5000)"
    echo -e "${BLUE}Example:${NC}"
    echo "  ${ME} docker.io/library/nginx:latest"
    echo "  ${ME} -r docker.io/library/nginx:latest docker.io/library/redis:latest"
    echo "  ${ME} -a nginx:latest redis:latest postgres:latest"
    echo "  ${ME} -p nginx:latest redis:latest"
    echo "  ${ME} -c nginx:latest redis:latest"
    echo "  LOCAL_REGISTRIES=127.0.0.1:5000,192.168.1.100:5000 ${ME} nginx:latest redis:latest"
    exit 1
}

# 从 daemon.json 读取仓库列表的函数
get_registries_from_daemon() {
    local daemon_json=""
    if [ -f "/etc/docker/daemon.json" ]; then
        daemon_json="/etc/docker/daemon.json"
    elif [ -f "/c/ProgramData/docker/config/daemon.json" ]; then
        daemon_json="/c/ProgramData/docker/config/daemon.json"
    else
        echo -e "${WARN} daemon.json not found"
        return 1
    fi

    if [ -f "$daemon_json" ]; then
        if ! command -v jq >/dev/null 2>&1; then
            echo -e "${ERROR} jq is required but not installed. Please install jq to use this script."
            exit 1
        fi
        FOUND_REGISTRIES=$(jq -r '.["insecure-registries"] | select(type=="array") | join(",")' "$daemon_json")
        if [ -n "$FOUND_REGISTRIES" ]; then
            echo "$FOUND_REGISTRIES"
            return 0
        fi
    fi
    return 1
}

# 处理单个镜像的函数
process_image() {
    local SOURCE_IMAGE="$1"
    local REMOVE_DOMAIN="$2"
    local LOCAL_REGISTRIES="$3"
    local PULL_IMAGE="$4"
    local CLEAN_IMAGE="$5"
    local PUSH_SUCCESS=true

    echo -e "\n${INFO} 开始处理镜像: ${BLUE}${SOURCE_IMAGE}${NC}"

    # 拉取原始镜像
    if [ "$PULL_IMAGE" = true ]; then
        echo -e "${INFO} 拉取镜像中..."
        if ! docker pull "${SOURCE_IMAGE}"; then
            echo -e "${ERROR} 镜像拉取失败"
            return 1
        fi
        echo -e "${SUCCESS} 镜像拉取成功"
    else
        echo -e "${INFO} 跳过拉取镜像步骤"
    fi

    # 处理目标镜像名称
    if [ "$REMOVE_DOMAIN" = true ]; then
        TARGET_IMAGE=$(echo "${SOURCE_IMAGE}" | sed -E 's|^[^/]+/||')
        echo -e "${INFO} 移除域名后的镜像名称: ${BLUE}${TARGET_IMAGE}${NC}"
    else
        TARGET_IMAGE="${SOURCE_IMAGE}"
    fi

    # 将 LOCAL_REGISTRIES 转换为数组
    IFS=',' read -ra REGISTRY_ARRAY <<<"$LOCAL_REGISTRIES"

    # 遍历每个仓库地址
    for REGISTRY in "${REGISTRY_ARRAY[@]}"; do
        # 去除可能存在的空格
        REGISTRY=$(echo "$REGISTRY" | tr -d ' ')
        echo -e "${INFO} 正在推送到仓库: ${BLUE}${REGISTRY}${NC}"

        # 标记镜像
        echo -e "${INFO} 标记镜像: ${BLUE}${REGISTRY}/${TARGET_IMAGE}${NC}"
        if ! docker tag "${SOURCE_IMAGE}" "${REGISTRY}/${TARGET_IMAGE}"; then
            echo -e "${ERROR} 标记镜像失败"
            PUSH_SUCCESS=false
            continue
        fi

        # 推送到仓库
        if docker push "${REGISTRY}/${TARGET_IMAGE}"; then
            echo -e "${SUCCESS} 推送成功: ${GREEN}${REGISTRY}/${TARGET_IMAGE}${NC}"
        else
            echo -e "${ERROR} 推送失败: ${RED}${REGISTRY}/${TARGET_IMAGE}${NC}"
            PUSH_SUCCESS=false
        fi

        # 清理本地标记的镜像
        if [ "$CLEAN_IMAGE" = true ]; then
            echo -e "${INFO} 清理标记的镜像"
            docker rmi "${REGISTRY}/${TARGET_IMAGE}" >/dev/null 2>&1
        fi
    done

    # 清理原始镜像
    if [ "$CLEAN_IMAGE" = true ]; then
        echo -e "${INFO} 清理原始镜像"
        docker rmi "${SOURCE_IMAGE}" >/dev/null 2>&1
    fi

    # 如果任何一个仓库推送失败，整个镜像处理就算失败
    if [ "$PUSH_SUCCESS" = false ]; then
        echo -e "${ERROR} 镜像 ${RED}${SOURCE_IMAGE}${NC} 处理失败：某些仓库推送失败"
        return 1
    fi

    echo -e "${SUCCESS} 镜像 ${GREEN}${SOURCE_IMAGE}${NC} 处理完成"
    return 0
}

# 处理命令行参数
REMOVE_DOMAIN=false
AUTO_DETECT=false
PULL_IMAGE=false
CLEAN_IMAGE=false
while getopts "rahpc" opt; do
    case $opt in
    r)
        REMOVE_DOMAIN=true
        ;;
    a)
        AUTO_DETECT=true
        ;;
    p)
        PULL_IMAGE=true
        ;;
    c)
        CLEAN_IMAGE=true
        ;;
    h)
        show_help
        ;;
    \?)
        show_help
        ;;
    esac
done

# 移除已处理的选项，剩下的参数就是镜像名称列表
shift $((OPTIND - 1))

# 检查是否提供了镜像名称
if [ $# -lt 1 ]; then
    show_help
fi

# 设置注册表列表
if [ "$AUTO_DETECT" = true ] && [ -z "$LOCAL_REGISTRIES" ]; then
    DETECTED_REGISTRIES=$(get_registries_from_daemon)
    if [ $? -eq 0 ] && [ -n "$DETECTED_REGISTRIES" ]; then
        LOCAL_REGISTRIES="$DETECTED_REGISTRIES"
        echo -e "${INFO} 从 daemon.json 检测到的仓库列表: ${BLUE}${LOCAL_REGISTRIES}${NC}"
    else
        echo -e "${WARN} 未检测到仓库列表，使用默认值"
        LOCAL_REGISTRIES="127.0.0.1:5000"
    fi
elif [ -z "$LOCAL_REGISTRIES" ]; then
    LOCAL_REGISTRIES="127.0.0.1:5000"
fi

# 处理所有提供的镜像
TOTAL_IMAGES=$#
PROCESSED=0
FAILED=0

# 创建数组来存储成功和失败的镜像
declare -a SUCCESS_IMAGES=()
declare -a FAILED_IMAGES=()

echo -e "${INFO} 共检测到 ${BLUE}${TOTAL_IMAGES}${NC} 个镜像待处理"

for image in "$@"; do
    PROCESSED=$((PROCESSED + 1))
    echo -e "\n${INFO} 处理第 ${BLUE}${PROCESSED}/${TOTAL_IMAGES}${NC} 个镜像"
    if ! process_image "$image" "$REMOVE_DOMAIN" "$LOCAL_REGISTRIES" "$PULL_IMAGE" "$CLEAN_IMAGE"; then
        FAILED_IMAGES+=("$image")
        FAILED=$((FAILED + 1))
    else
        SUCCESS_IMAGES+=("$image")
    fi
done

# 输出最终统计信息
echo -e "\n${INFO} 处理完成统计:"
echo -e "  总计: ${BLUE}${TOTAL_IMAGES}${NC} 个镜像"
echo -e "  成功: ${GREEN}$((TOTAL_IMAGES - FAILED))${NC} 个"
if [ $FAILED -gt 0 ]; then
    echo -e "  失败: ${RED}${FAILED}${NC} 个"
fi

# 显示成功和失败的镜像列表
if [ ${#SUCCESS_IMAGES[@]} -gt 0 ]; then
    echo -e "\n${SUCCESS} 成功处理的镜像:"
    for image in "${SUCCESS_IMAGES[@]}"; do
        echo -e "  ${GREEN}✓${NC} $image"
    done
fi

if [ ${#FAILED_IMAGES[@]} -gt 0 ]; then
    echo -e "\n${ERROR} 处理失败的镜像:"
    for image in "${FAILED_IMAGES[@]}"; do
        echo -e "  ${RED}✗${NC} $image"
    done
fi

# 只为成功的镜像显示仓库地址
if [ ${#SUCCESS_IMAGES[@]} -gt 0 ]; then
    echo -e "\n${INFO} 成功推送的镜像可通过以下地址访问:"
    IFS=',' read -ra REGISTRY_ARRAY <<<"$LOCAL_REGISTRIES"
    for image in "${SUCCESS_IMAGES[@]}"; do
        if [ "$REMOVE_DOMAIN" = true ]; then
            TARGET_IMAGE=$(echo "${image}" | sed -E 's|^[^/]+/||')
        else
            TARGET_IMAGE="${image}"
        fi
        for REGISTRY in "${REGISTRY_ARRAY[@]}"; do
            REGISTRY_CLEAN=$(echo "$REGISTRY" | tr -d ' ')
            echo "  ${REGISTRY_CLEAN}/${TARGET_IMAGE}"
        done
    done

    echo -e "\n${INFO} 也可以使用以下地址访问:"
    for image in "${SUCCESS_IMAGES[@]}"; do
        if [ "$REMOVE_DOMAIN" = true ]; then
            TARGET_IMAGE=$(echo "${image}" | sed -E 's|^[^/]+/||')
        else
            TARGET_IMAGE="${image}"
        fi
        echo -e "  127.0.0.1:5000/${TARGET_IMAGE}"
    done
fi
